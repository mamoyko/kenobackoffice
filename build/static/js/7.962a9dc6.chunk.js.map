{"version":3,"sources":["app/pages/home/bets/components/BetViewComponent.js","app/pages/home/bets/BetComponent.js","app/crud/bet.crud.js","app/partials/shared/Modal.js"],"names":["BetViewComponent","useState","state","setState","initialInput","_id","playerName","balance","betAmount","WinAmount","LoseAmount","betTable","data","setIsModalOpen","setIsUpdate","setInput","reRender","useEffect","a","getBet","response","map","o","active","push","columns","title","field","render","rowData","player","name","firstName","lastName","draw","reward","keno_played","item","hit_count","moment","date_created","format","fetchData","Container","fluid","Button","className","variant","color","size","onClick","align","CircularProgress","BetComponent","exact","from","to","path","component","API_URL","process","PLAYER","axios","get","getBetByPlayer","id","ModalTable","props","dialogClassName","show","open","onHide","handleClose","centered","Header","closeButton","Title","Body","children"],"mappings":"0QAWA,IAyKeA,EAzKU,WAAO,IAAD,EACHC,mBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,KAGvBC,EAAe,CACnBC,IAAK,GACLC,WAAY,GACZC,QAAS,GACTC,UAAW,GACXC,UAAW,GACXC,WAAY,GACZC,SAAU,GACVC,KAAM,IAXqB,EAaSX,oBAAS,GAblB,mBAaTY,GAbS,aAcGZ,oBAAS,GAdZ,mBAcZa,GAdY,aAeHb,mBAASG,GAfN,mBAefW,GAfe,aAgBGd,oBAAS,GAhBZ,mBAgBtBe,EAhBsB,UA0B7BC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACKC,cADL,OACZC,EADY,OAEdR,EAAO,GACXQ,EAASR,KAAKA,KAAKS,KAAI,SAAAC,GAAC,OAAkB,IAAbA,EAAEC,OAAkBX,EAAKY,KAAKF,GAAK,QAChEnB,EAAS,CACLsB,QAAS,CACL,CAAEC,MAAO,iBAAkBC,MAAO,kBAClC,CAAED,MAAO,cAAeC,MAAO,SAC3BC,OAAQ,SAAAC,GAAO,gBAAOA,EAAQC,OAAOC,KAAKC,UAA3B,YAAwCH,EAAQC,OAAOC,KAAKE,YAE/E,CAAEP,MAAO,aAAcC,MAAO,aAC9B,CAAED,MAAO,aAAcC,MAAO,OAC5BC,OAAQ,SAAAC,GAAO,gBAAOA,EAAQK,KAAKC,UAErC,CAAET,MAAO,YAAaC,MAAO,OACzBC,OAAQ,SAAAC,GAAO,OAAIA,EAAQK,KAAKE,YAAYf,KAAI,SAACgB,GAAD,gBAAaA,EAAb,UAEpD,CAAEX,MAAO,gBAAiBC,MAAO,OAC/BC,OAAQ,SAAAC,GAAO,OAAIA,EAAQK,KAAKE,YAAYf,KAAI,SAACgB,GAAD,gBAAaA,EAAb,UAElD,CAAEX,MAAO,YAAaC,MAAO,OACzBC,OAAQ,SAAAC,GAAO,OAAIA,EAAQK,KAAKI,YAEpC,CAAEZ,MAAO,OAAQC,MAAO,eACtBC,OAAQ,SAAAC,GAAO,OAAIU,EAAOV,EAAQW,cAAcC,OAAO,WAG7D7B,KAAMA,IA3BQ,2CAAH,qDA8Bf8B,KACC,CAAC1B,IA6EJ,OACE,kBAAC2B,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,IAAD,MAEC1C,EAAMU,KACL,oCACE,kBAACiC,EAAA,EAAD,CACEC,UAAU,OACVC,QAAQ,YACRC,MAAM,UACNC,KAAK,QACLC,QAAS,WACPrC,GAAe,GACfC,GAAY,GACZC,EAASX,KARb,OAaA,kBAAC,IAAD,CACEsB,MAAM,WACND,QAASvB,EAAMuB,QACfb,KAAMV,EAAMU,QAIhB,yBAAKuC,MAAM,UACT,kBAACC,EAAA,EAAD,SCzKK,SAASC,IACpB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUC,OAAO,EAAMC,KAAK,IAAIC,GAAG,UACnC,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAW1D,KAR3C,yC,iCCAA,yFAEa2D,EAAUC,8BACVC,EAAS,UAEf,SAAS1C,IACd,OAAO2C,IAAMC,IAAN,UAAaJ,EAAb,YAAwBE,IAG1B,SAASG,EAAeC,GAC7B,OAAOH,IAAMC,IAAN,UAAaJ,EAAb,YAAwBE,EAAxB,YAAkCI,M,iCCV3C,8BAuBeC,IAnBI,SAAAC,GACjB,OACE,6BACE,kBAAC,IAAD,CACEC,gBAAgB,YAChBC,KAAMF,EAAMG,KACZC,OAAQJ,EAAMK,YACdvB,KAAK,KACLwB,UAAQ,GAER,kBAAC,IAAMC,OAAP,CAAcC,aAAW,GACvB,kBAAC,IAAMC,MAAP,KAAcT,EAAMzC,QAEtB,kBAAC,IAAMmD,KAAP,KAAaV,EAAMW","file":"static/js/7.962a9dc6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { getBet } from '../../../../crud/bet.crud';\r\nimport TableModal from '../../../../partials/shared/Modal';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\n// import PlayerInput from './PlayerInput';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport * as moment from 'moment'\r\n\r\nconst BetViewComponent = () => {\r\n  const [state, setState] = useState(0);\r\n\r\n  const initialInput = {\r\n    _id: '',\r\n    playerName: '',\r\n    balance: '',\r\n    betAmount: '',\r\n    WinAmount: '',\r\n    LoseAmount: '',\r\n    betTable: '',\r\n    data: ''\r\n  };\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n  const [input, setInput] = useState(initialInput);\r\n  const [reRender, setRerender] = useState(false); // Re render table after updating\r\n\r\n  const notify = data => {\r\n    if (data.success) {\r\n      toast.success(data.message);\r\n    } else {\r\n      toast.error(data.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n    const response = await getBet();\r\n    let data = [];\r\n    response.data.data.map(o => (o.active === true ? data.push(o) : null));\r\n    setState({\r\n        columns: [\r\n            { title: 'Transaction id', field: 'transaction_id'},\r\n            { title: 'Player name', field: 'player',\r\n                render: rowData => `${rowData.player.name.firstName} ${rowData.player.name.lastName}`\r\n            },\r\n            { title: 'Bet Amount', field: 'betAmount'},\r\n            { title: 'Win Amount', field: 'draw',\r\n              render: rowData => `${rowData.draw.reward}`\r\n            },\r\n            { title: 'Bet Table', field: 'draw',\r\n                render: rowData => rowData.draw.keno_played.map((item) => `${item} `)\r\n            },\r\n            { title: 'Table Results', field: 'draw',\r\n              render: rowData => rowData.draw.keno_played.map((item) => `${item} `)\r\n            },\r\n            { title: 'Hit Count', field: 'draw',\r\n                render: rowData => rowData.draw.hit_count\r\n            },\r\n            { title: 'Date', field: 'date_created',\r\n              render: rowData => moment(rowData.date_created).format('LLLL')\r\n            }\r\n        ],\r\n        data: data\r\n      });\r\n    };\r\n    fetchData();\r\n  }, [reRender]);\r\n\r\n  const handleChange = e => {\r\n    setInput({\r\n      ...input,\r\n      [e.target.id]: e.target.value\r\n    });\r\n  };\r\n\r\n  const handleSubmitBusiness = async e => {\r\n    e.preventDefault();\r\n    if (isUpdate) {\r\n      try {\r\n        let obj = {\r\n            _id: input._id,\r\n            name: {\r\n                firstName: input.firstName,\r\n                middleName: input.middleName,\r\n                lastName: input.lastName\r\n            },\r\n            email: input.email,\r\n            username: input.username,\r\n            phone: input.phone,\r\n            balance: input.balance,\r\n            currency: input.currency\r\n        };\r\n        // await updatePlayer(obj);\r\n        notify({ success: true, message: 'Success updating business.' });\r\n      } catch (error) {}\r\n    }\r\n    if (!isUpdate) {\r\n      try {\r\n        let obj = {\r\n            name: {\r\n                firstName: input.firstName,\r\n                middleName: input.middleName,\r\n                lastName: input.lastName\r\n            },\r\n            email: input.email,\r\n            username: input.username,\r\n            phone: input.phone,\r\n            balance: input.balance,\r\n            currency: input.currency\r\n        };\r\n        // await addPlayer(obj);\r\n        notify({ success: true, message: 'Success adding business.' });\r\n      } catch (error) {}\r\n    }\r\n    setIsModalOpen(false);\r\n    setRerender(!reRender);\r\n  };\r\n\r\n  const upPlayer = data => {\r\n    setInput({\r\n        _id : data._id,\r\n        firstName: data.name.firstName,\r\n        middleName: data.name.middleName,\r\n        lastName: data.name.lastName,\r\n        email: data.email,\r\n        username: data.username,\r\n        phone: data.phone,\r\n        balance: data.balance,\r\n        currency: data.currency\r\n    });\r\n    setIsModalOpen(true);\r\n    setRerender(!reRender);\r\n  };\r\n\r\n  const delPlayer = async id => {\r\n    // await deletePlayer(id);\r\n    setRerender(!reRender);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Container fluid>\r\n      <ToastContainer />\r\n\r\n      {state.data ? (\r\n        <>\r\n          <Button\r\n            className='mb-2'\r\n            variant='contained'\r\n            color='primary'\r\n            size='large'\r\n            onClick={() => {\r\n              setIsModalOpen(true);\r\n              setIsUpdate(false);\r\n              setInput(initialInput);\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n          <MaterialTable\r\n            title='Business'\r\n            columns={state.columns}\r\n            data={state.data}\r\n          />\r\n        </>\r\n      ) : (\r\n        <div align='center'>\r\n          <CircularProgress />\r\n        </div>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default BetViewComponent;\r\n","import React from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport BetViewComponent from './components/BetViewComponent';\r\n\r\nexport default function BetComponent() {\r\n    return (\r\n        <Switch>\r\n            <Redirect exact={true} from=\"/\" to=\"/bets\"/>\r\n            <Route path=\"/bets\" component={BetViewComponent} />\r\n        </Switch>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nexport const API_URL = process.env.REACT_APP_API_URL;\r\nexport const PLAYER = 'api/bet';\r\n\r\nexport function getBet() {\r\n  return axios.get(`${API_URL}/${PLAYER}`);\r\n}\r\n\r\nexport function getBetByPlayer(id) {\r\n  return axios.get(`${API_URL}/${PLAYER}/${id}`);\r\n}\r\n\r\n// export function addPlayer(player) {\r\n//     return axios.post(`${API_URL}/${PLAYER}`, { player });\r\n// }\r\n\r\n// export function updatePlayer(player){\r\n//     return axios.patch(`${API_URL}/${PLAYER}`, { player });\r\n// }\r\n\r\n// export function deletePlayer(id){\r\n//     return axios.delete(`${API_URL}/${PLAYER}/${id}`);\r\n// }\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nconst ModalTable = props => {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        dialogClassName='modal-90w'\r\n        show={props.open}\r\n        onHide={props.handleClose}\r\n        size=\"lg\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{props.title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{props.children}</Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalTable;\r\n"],"sourceRoot":""}